export function createColorRangeFunction(
  min: number,
  max: number,
  colors: string[],
) {
  if (min >= max) {
    return (_: number) => colors[0];
  }

  const range = max - min;
  const segmentSize = range / colors.length;

  const segments = colors.map((color, index) => ({
    min: min + segmentSize * index,
    max: min + segmentSize * (index + 1),
    color,
  }));

  return (value: number) => {
    if (value < min || value > max) {
      return undefined;
    }

    const segment = segments.find(
      (seg) => value >= seg.min && value <= seg.max,
    );

    return segment ? segment.color : colors[colors.length - 1];
  };
}

export const letterMap: Record<string, number[] | "empty"> = {
  a: [1, 2, 3, 4, 5, 6, 7, 10, 14, 17, 21, 24, 29, 30, 31, 32, 33, 34],
  b: [0, 1, 2, 3, 4, 5, 6, 7, 10, 13, 14, 17, 20, 21, 24, 27, 29, 30, 32, 33],
  c: [1, 2, 3, 4, 5, 7, 13, 14, 20, 21, 27, 29, 33],
  d: [0, 1, 2, 3, 4, 5, 6, 7, 13, 14, 20, 21, 27, 29, 30, 31, 32, 33],
  e: [0, 1, 2, 3, 4, 5, 6, 7, 10, 13, 14, 17, 20, 21, 24, 27, 28, 34],
  f: [0, 1, 2, 3, 4, 5, 6, 7, 10, 14, 17, 21, 24, 28],
  g: [1, 2, 3, 4, 5, 7, 13, 14, 17, 20, 21, 24, 27, 29, 31, 32, 33],
  h: [0, 1, 2, 3, 4, 5, 6, 10, 17, 24, 28, 29, 30, 31, 32, 33, 34],
  i: [7, 13, 14, 15, 16, 17, 18, 19, 20, 21, 27],
  j: [5, 7, 13, 14, 20, 21, 27, 28, 29, 30, 31, 32, 33],
  k: [0, 1, 2, 3, 4, 5, 6, 10, 17, 23, 25, 28, 29, 33, 34],
  l: [0, 1, 2, 3, 4, 5, 6, 13, 20, 27, 34],
  m: [0, 1, 2, 3, 4, 5, 6, 8, 16, 22, 28, 29, 30, 31, 32, 33, 34],
  n: [0, 1, 2, 3, 4, 5, 6, 9, 17, 25, 28, 29, 30, 31, 32, 33, 34],
  o: [1, 2, 3, 4, 5, 7, 13, 14, 20, 21, 27, 29, 30, 31, 32, 33],
  p: [0, 1, 2, 3, 4, 5, 6, 7, 10, 14, 17, 21, 24, 29, 30],
  q: [1, 2, 3, 4, 5, 7, 13, 14, 18, 20, 21, 26, 27, 29, 30, 31, 32, 33, 34],
  r: [0, 1, 2, 3, 4, 5, 6, 7, 10, 14, 17, 21, 24, 29, 30, 32, 33, 34],
  s: [1, 2, 5, 7, 10, 13, 14, 17, 20, 21, 24, 27, 29, 32, 33],
  t: [0, 7, 14, 15, 16, 17, 18, 19, 20, 21, 28],
  u: [0, 1, 2, 3, 4, 5, 13, 20, 27, 28, 29, 30, 31, 32, 33],
  v: [0, 1, 2, 3, 4, 12, 20, 26, 28, 29, 30, 31, 32],
  w: [0, 1, 2, 3, 4, 5, 6, 12, 18, 26, 28, 29, 30, 31, 32, 33, 34],
  x: [0, 1, 5, 6, 9, 11, 17, 23, 25, 28, 29, 33, 34],
  y: [0, 1, 9, 17, 18, 19, 20, 23, 28, 29],
  z: [0, 5, 6, 7, 11, 13, 14, 17, 20, 21, 23, 27, 28, 29, 34],
  // Numbers 0-9
  "0": [1, 2, 3, 4, 5, 7, 9, 13, 14, 17, 20, 21, 25, 27, 29, 30, 31, 32, 33],
  "1": [8, 13, 14, 15, 16, 17, 18, 19, 20, 27],
  "2": [1, 6, 7, 12, 13, 14, 18, 20, 21, 24, 27, 29, 30, 34],
  "3": [1, 5, 7, 13, 14, 17, 20, 21, 24, 27, 29, 30, 32, 33],
  "4": [3, 4, 9, 11, 15, 18, 21, 22, 23, 24, 25, 26, 27, 32],
  "5": [0, 1, 2, 3, 6, 7, 10, 13, 14, 17, 20, 21, 24, 27, 28, 32, 33],
  "6": [1, 2, 3, 4, 5, 7, 10, 13, 14, 17, 20, 21, 24, 27, 29, 32, 33],
  "7": [0, 7, 14, 17, 18, 19, 20, 21, 23, 28, 29],
  "8": [1, 2, 4, 5, 7, 10, 13, 14, 17, 20, 21, 24, 27, 29, 30, 32, 33],
  "9": [1, 2, 5, 7, 10, 13, 14, 17, 20, 21, 24, 27, 29, 30, 31, 32, 33],
  // symbols
  "!": [21, 22, 23, 24, 25, 27],
  "?": [1, 7, 14, 18, 20, 21, 24, 29, 30],
  "-": [10, 17, 24],
  ">": [0, 6, 8, 12, 16, 18, 24],
  "<": [10, 16, 18, 22, 26, 28, 34],
  _: [6, 13, 20, 27, 34],
  " ": "empty",
};
